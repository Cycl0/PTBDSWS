from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = '61591e8c08b0'
down_revision = None
branch_labels = None
depends_on = None

def is_sqlite():
    """Helper function to detect if the current DB is SQLite."""
    bind = op.get_bind()
    return bind.dialect.name == "sqlite"

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_name', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('user_last_name', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('user_ip', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('user_host', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('user_inst', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('user_disc', sa.String(length=64), nullable=True))
        batch_op.add_column(sa.Column('user_role_id', sa.Integer(), nullable=True))

        batch_op.drop_index('ix_user_username')
        batch_op.create_index(batch_op.f('ix_user_user_name'), ['user_name'], unique=True)

        # Only drop and recreate the constraint if NOT using SQLite
        if not is_sqlite():
            batch_op.drop_constraint('fk_user_role_id', type_='foreignkey')
            batch_op.create_foreign_key('fk_user_role_id', 'role', ['user_role_id'], ['id'])

        batch_op.drop_column('role_id')
        batch_op.drop_column('username')

    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('username', sa.VARCHAR(length=64), nullable=True))
        batch_op.add_column(sa.Column('role_id', sa.INTEGER(), nullable=True))

        # Only drop and recreate the constraint if NOT using SQLite
        if not is_sqlite():
            batch_op.drop_constraint('fk_user_role_id', type_='foreignkey')
            batch_op.create_foreign_key('fk_user_role_id', 'role', ['role_id'], ['id'])

        batch_op.drop_index